-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from While/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> C                                 (0)
	C -> skip                                          (1)
	C -> 'new' var '=' A                               (2)
	C -> var ':=' A                                    (3)
	C -> C ';' C                                       (4)
	C -> 'while' B 'do' C 'end'                        (5)
	C -> 'if' B 'then' C 'end'                         (6)
	C -> 'if' B 'then' C 'else' C 'end'                (7)
	C -> 'try' C 'catch' C                             (8)
	C -> 'error'                                       (9)
	C -> '(' C ')'                                     (10)
	A -> var                                           (11)
	A -> num                                           (12)
	A -> A '+' A                                       (13)
	A -> A '*' A                                       (14)
	A -> A '%' A                                       (15)
	A -> A '/' A                                       (16)
	A -> '(' A ')'                                     (17)
	B -> bln                                           (18)
	B -> B and B                                       (19)
	B -> B or B                                        (20)
	B -> not B                                         (21)
	B -> A '>' A                                       (22)
	B -> A '<' A                                       (23)
	B -> A '==' A                                      (24)
	B -> '(' B ')'                                     (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	var            { TokenVar $$ }
	'+'            { TokenPlus }
	'*'            { TokenTimes }
	'%'            { TokenMod }
	'/'            { TokenDiv }
	bln            { TokenBln $$ }
	and            { TokenAnd }
	or             { TokenOr }
	not            { TokenNot }
	'>'            { TokenGt }
	'<'            { TokenLt }
	'=='           { TokenEq }
	skip           { TokenSkip }
	'new'          { TokenNew }
	'='            { TokenIg }
	':='           { TokenUpd }
	';'            { TokenSeq }
	'while'        { TokenWhile }
	'do'           { TokenDo }
	'end'          { TokenEnd }
	'if'           { TokenIf }
	'then'         { TokenThen }
	'else'         { TokenElse }
	'try'          { TokenTry }
	'catch'        { TokenCatch }
	'error'        { TokenErr }
	'('            { TokenOB }
	')'            { TokenCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	C               rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
	A               rules 11, 12, 13, 14, 15, 16, 17
	B               rules 18, 19, 20, 21, 22, 23, 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . C                                (rule 0)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 3

State 1

	C -> . skip                                         (rule 1)

	skip           shift, and enter state 2


State 2

	C -> skip .                                         (rule 1)

	';'            reduce using rule 1
	'end'          reduce using rule 1
	'else'         reduce using rule 1
	'catch'        reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser -> C .                                (rule 0)
	C -> C . ';' C                                      (rule 4)

	';'            shift, and enter state 23
	%eof           accept


State 4

	C -> var . ':=' A                                   (rule 3)

	':='           shift, and enter state 22


State 5

	C -> 'new' . var '=' A                              (rule 2)

	var            shift, and enter state 21


State 6

	C -> 'while' . B 'do' C 'end'                       (rule 5)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 13
	B              goto state 20

State 7

	C -> 'if' . B 'then' C 'end'                        (rule 6)
	C -> 'if' . B 'then' C 'else' C 'end'               (rule 7)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 13
	B              goto state 14

State 8

	C -> 'try' . C 'catch' C                            (rule 8)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 12

State 9

	C -> 'error' .                                      (rule 9)

	';'            reduce using rule 9
	'end'          reduce using rule 9
	'else'         reduce using rule 9
	'catch'        reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 10

	C -> '(' . C ')'                                    (rule 10)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 11

State 11

	C -> C . ';' C                                      (rule 4)
	C -> '(' C . ')'                                    (rule 10)

	';'            shift, and enter state 23
	')'            shift, and enter state 43


State 12

	C -> C . ';' C                                      (rule 4)
	C -> 'try' C . 'catch' C                            (rule 8)

	';'            shift, and enter state 23
	'catch'        shift, and enter state 42


State 13

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	B -> A . '>' A                                      (rule 22)
	B -> A . '<' A                                      (rule 23)
	B -> A . '==' A                                     (rule 24)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'=='           shift, and enter state 41


State 14

	C -> 'if' B . 'then' C 'end'                        (rule 6)
	C -> 'if' B . 'then' C 'else' C 'end'               (rule 7)
	B -> B . and B                                      (rule 19)
	B -> B . or B                                       (rule 20)

	and            shift, and enter state 28
	or             shift, and enter state 29
	'then'         shift, and enter state 34


State 15

	A -> num .                                          (rule 12)

	'+'            reduce using rule 12
	'*'            reduce using rule 12
	'%'            reduce using rule 12
	'/'            reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	'>'            reduce using rule 12
	'<'            reduce using rule 12
	'=='           reduce using rule 12
	';'            reduce using rule 12
	'do'           reduce using rule 12
	'end'          reduce using rule 12
	'then'         reduce using rule 12
	'else'         reduce using rule 12
	'catch'        reduce using rule 12
	')'            reduce using rule 12
	%eof           reduce using rule 12


State 16

	A -> var .                                          (rule 11)

	'+'            reduce using rule 11
	'*'            reduce using rule 11
	'%'            reduce using rule 11
	'/'            reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	'>'            reduce using rule 11
	'<'            reduce using rule 11
	'=='           reduce using rule 11
	';'            reduce using rule 11
	'do'           reduce using rule 11
	'end'          reduce using rule 11
	'then'         reduce using rule 11
	'else'         reduce using rule 11
	'catch'        reduce using rule 11
	')'            reduce using rule 11
	%eof           reduce using rule 11


State 17

	B -> bln .                                          (rule 18)

	and            reduce using rule 18
	or             reduce using rule 18
	'do'           reduce using rule 18
	'then'         reduce using rule 18
	')'            reduce using rule 18


State 18

	B -> not . B                                        (rule 21)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 13
	B              goto state 33

State 19

	A -> '(' . A ')'                                    (rule 17)
	B -> '(' . B ')'                                    (rule 25)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 31
	B              goto state 32

State 20

	C -> 'while' B . 'do' C 'end'                       (rule 5)
	B -> B . and B                                      (rule 19)
	B -> B . or B                                       (rule 20)

	and            shift, and enter state 28
	or             shift, and enter state 29
	'do'           shift, and enter state 30


State 21

	C -> 'new' var . '=' A                              (rule 2)

	'='            shift, and enter state 27


State 22

	C -> var ':=' . A                                   (rule 3)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 25

State 23

	C -> C ';' . C                                      (rule 4)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 24

State 24

	C -> C . ';' C                                      (rule 4)
	C -> C ';' C .                                      (rule 4)

	';'            reduce using rule 4
	'end'          reduce using rule 4
	'else'         reduce using rule 4
	'catch'        reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 25

	C -> var ':=' A .                                   (rule 3)
	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	';'            reduce using rule 3
	'end'          reduce using rule 3
	'else'         reduce using rule 3
	'catch'        reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 26

	A -> '(' . A ')'                                    (rule 17)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 59

State 27

	C -> 'new' var '=' . A                              (rule 2)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 58

State 28

	B -> B and . B                                      (rule 19)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 13
	B              goto state 57

State 29

	B -> B or . B                                       (rule 20)

	num            shift, and enter state 15
	var            shift, and enter state 16
	bln            shift, and enter state 17
	not            shift, and enter state 18
	'('            shift, and enter state 19

	A              goto state 13
	B              goto state 56

State 30

	C -> 'while' B 'do' . C 'end'                       (rule 5)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 55

State 31

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	A -> '(' A . ')'                                    (rule 17)
	B -> A . '>' A                                      (rule 22)
	B -> A . '<' A                                      (rule 23)
	B -> A . '==' A                                     (rule 24)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	'>'            shift, and enter state 39
	'<'            shift, and enter state 40
	'=='           shift, and enter state 41
	')'            shift, and enter state 54


State 32

	B -> B . and B                                      (rule 19)
	B -> B . or B                                       (rule 20)
	B -> '(' B . ')'                                    (rule 25)

	and            shift, and enter state 28
	or             shift, and enter state 29
	')'            shift, and enter state 53


State 33

	B -> B . and B                                      (rule 19)
	B -> B . or B                                       (rule 20)
	B -> not B .                                        (rule 21)

	and            reduce using rule 21
	or             reduce using rule 21
	'do'           reduce using rule 21
	'then'         reduce using rule 21
	')'            reduce using rule 21


State 34

	C -> 'if' B 'then' . C 'end'                        (rule 6)
	C -> 'if' B 'then' . C 'else' C 'end'               (rule 7)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 52

State 35

	A -> A '+' . A                                      (rule 13)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 51

State 36

	A -> A '*' . A                                      (rule 14)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 50

State 37

	A -> A '%' . A                                      (rule 15)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 49

State 38

	A -> A '/' . A                                      (rule 16)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 48

State 39

	B -> A '>' . A                                      (rule 22)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 47

State 40

	B -> A '<' . A                                      (rule 23)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 46

State 41

	B -> A '==' . A                                     (rule 24)

	num            shift, and enter state 15
	var            shift, and enter state 16
	'('            shift, and enter state 26

	A              goto state 45

State 42

	C -> 'try' C 'catch' . C                            (rule 8)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 44

State 43

	C -> '(' C ')' .                                    (rule 10)

	';'            reduce using rule 10
	'end'          reduce using rule 10
	'else'         reduce using rule 10
	'catch'        reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 44

	C -> C . ';' C                                      (rule 4)
	C -> 'try' C 'catch' C .                            (rule 8)

	';'            reduce using rule 8
	'end'          reduce using rule 8
	'else'         reduce using rule 8
	'catch'        reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 45

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	B -> A '==' A .                                     (rule 24)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	and            reduce using rule 24
	or             reduce using rule 24
	'do'           reduce using rule 24
	'then'         reduce using rule 24
	')'            reduce using rule 24


State 46

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	B -> A '<' A .                                      (rule 23)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	and            reduce using rule 23
	or             reduce using rule 23
	'do'           reduce using rule 23
	'then'         reduce using rule 23
	')'            reduce using rule 23


State 47

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	B -> A '>' A .                                      (rule 22)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	and            reduce using rule 22
	or             reduce using rule 22
	'do'           reduce using rule 22
	'then'         reduce using rule 22
	')'            reduce using rule 22


State 48

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	A -> A '/' A .                                      (rule 16)

	'+'            reduce using rule 16
	'*'            reduce using rule 16
	'%'            reduce using rule 16
	'/'            reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	'>'            reduce using rule 16
	'<'            reduce using rule 16
	'=='           reduce using rule 16
	';'            reduce using rule 16
	'do'           reduce using rule 16
	'end'          reduce using rule 16
	'then'         reduce using rule 16
	'else'         reduce using rule 16
	'catch'        reduce using rule 16
	')'            reduce using rule 16
	%eof           reduce using rule 16


State 49

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A '%' A .                                      (rule 15)
	A -> A . '/' A                                      (rule 16)

	'+'            reduce using rule 15
	'*'            reduce using rule 15
	'%'            reduce using rule 15
	'/'            reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	'>'            reduce using rule 15
	'<'            reduce using rule 15
	'=='           reduce using rule 15
	';'            reduce using rule 15
	'do'           reduce using rule 15
	'end'          reduce using rule 15
	'then'         reduce using rule 15
	'else'         reduce using rule 15
	'catch'        reduce using rule 15
	')'            reduce using rule 15
	%eof           reduce using rule 15


State 50

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A '*' A .                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)

	'+'            reduce using rule 14
	'*'            reduce using rule 14
	'%'            reduce using rule 14
	'/'            reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	'=='           reduce using rule 14
	';'            reduce using rule 14
	'do'           reduce using rule 14
	'end'          reduce using rule 14
	'then'         reduce using rule 14
	'else'         reduce using rule 14
	'catch'        reduce using rule 14
	')'            reduce using rule 14
	%eof           reduce using rule 14


State 51

	A -> A . '+' A                                      (rule 13)
	A -> A '+' A .                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)

	'+'            reduce using rule 13
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	and            reduce using rule 13
	or             reduce using rule 13
	'>'            reduce using rule 13
	'<'            reduce using rule 13
	'=='           reduce using rule 13
	';'            reduce using rule 13
	'do'           reduce using rule 13
	'end'          reduce using rule 13
	'then'         reduce using rule 13
	'else'         reduce using rule 13
	'catch'        reduce using rule 13
	')'            reduce using rule 13
	%eof           reduce using rule 13


State 52

	C -> C . ';' C                                      (rule 4)
	C -> 'if' B 'then' C . 'end'                        (rule 6)
	C -> 'if' B 'then' C . 'else' C 'end'               (rule 7)

	';'            shift, and enter state 23
	'end'          shift, and enter state 61
	'else'         shift, and enter state 62


State 53

	B -> '(' B ')' .                                    (rule 25)

	and            reduce using rule 25
	or             reduce using rule 25
	'do'           reduce using rule 25
	'then'         reduce using rule 25
	')'            reduce using rule 25


State 54

	A -> '(' A ')' .                                    (rule 17)

	'+'            reduce using rule 17
	'*'            reduce using rule 17
	'%'            reduce using rule 17
	'/'            reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17
	';'            reduce using rule 17
	'do'           reduce using rule 17
	'end'          reduce using rule 17
	'then'         reduce using rule 17
	'else'         reduce using rule 17
	'catch'        reduce using rule 17
	')'            reduce using rule 17
	%eof           reduce using rule 17


State 55

	C -> C . ';' C                                      (rule 4)
	C -> 'while' B 'do' C . 'end'                       (rule 5)

	';'            shift, and enter state 23
	'end'          shift, and enter state 60


State 56

	B -> B . and B                                      (rule 19)
	B -> B . or B                                       (rule 20)
	B -> B or B .                                       (rule 20)

	and            reduce using rule 20
	or             reduce using rule 20
	'do'           reduce using rule 20
	'then'         reduce using rule 20
	')'            reduce using rule 20


State 57

	B -> B . and B                                      (rule 19)
	B -> B and B .                                      (rule 19)
	B -> B . or B                                       (rule 20)

	and            reduce using rule 19
	or             reduce using rule 19
	'do'           reduce using rule 19
	'then'         reduce using rule 19
	')'            reduce using rule 19


State 58

	C -> 'new' var '=' A .                              (rule 2)
	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	';'            reduce using rule 2
	'end'          reduce using rule 2
	'else'         reduce using rule 2
	'catch'        reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 59

	A -> A . '+' A                                      (rule 13)
	A -> A . '*' A                                      (rule 14)
	A -> A . '%' A                                      (rule 15)
	A -> A . '/' A                                      (rule 16)
	A -> '(' A . ')'                                    (rule 17)

	'+'            shift, and enter state 35
	'*'            shift, and enter state 36
	'%'            shift, and enter state 37
	'/'            shift, and enter state 38
	')'            shift, and enter state 54


State 60

	C -> 'while' B 'do' C 'end' .                       (rule 5)

	';'            reduce using rule 5
	'end'          reduce using rule 5
	'else'         reduce using rule 5
	'catch'        reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 61

	C -> 'if' B 'then' C 'end' .                        (rule 6)

	';'            reduce using rule 6
	'end'          reduce using rule 6
	'else'         reduce using rule 6
	'catch'        reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 62

	C -> 'if' B 'then' C 'else' . C 'end'               (rule 7)

	var            shift, and enter state 4
	skip           shift, and enter state 2
	'new'          shift, and enter state 5
	'while'        shift, and enter state 6
	'if'           shift, and enter state 7
	'try'          shift, and enter state 8
	'error'        shift, and enter state 9
	'('            shift, and enter state 10

	C              goto state 63

State 63

	C -> C . ';' C                                      (rule 4)
	C -> 'if' B 'then' C 'else' C . 'end'               (rule 7)

	';'            shift, and enter state 23
	'end'          shift, and enter state 64


State 64

	C -> 'if' B 'then' C 'else' C 'end' .               (rule 7)

	';'            reduce using rule 7
	'end'          reduce using rule 7
	'else'         reduce using rule 7
	'catch'        reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 29
Number of non-terminals: 4
Number of states: 65
