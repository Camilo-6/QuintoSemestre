-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> E                                 (0)
	E -> var                                           (1)
	E -> num                                           (2)
	E -> bool                                          (3)
	E -> '[]'                                          (4)
	E -> E '::' E                                      (5)
	E -> '(' E ')'                                     (6)
	E -> E '+' E                                       (7)
	E -> E '-' E                                       (8)
	E -> E '*' E                                       (9)
	E -> E '/' E                                       (10)
	E -> E '%' E                                       (11)
	E -> E '==' E                                      (12)
	E -> E '<' E                                       (13)
	E -> E '<=' E                                      (14)
	E -> E '>' E                                       (15)
	E -> E '>=' E                                      (16)
	E -> E '&&' E                                      (17)
	E -> E '||' E                                      (18)
	E -> 'not' E                                       (19)
	E -> 'head' E                                      (20)
	E -> 'tail' E                                      (21)
	E -> E '++' E                                      (22)
	E -> '(' E E ')'                                   (23)
	E -> 'if' E 'then' E 'else' E                      (24)
	E -> 'let' var '=' E 'in' E 'end'                  (25)
	E -> 'lam' var '::' T '->' E                       (26)
	T -> 'Nat'                                         (27)
	T -> 'Bool'                                        (28)
	T -> T '->' T                                      (29)
	T -> '[' T ']'                                     (30)
	T -> '(' T ')'                                     (31)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	var            { TokenVar $$ }
	bool           { TokenBool $$ }
	'[]'           { TokenNil }
	'::'           { TokenDoubleColon }
	'++'           { TokenDoublePlus }
	'head'         { TokenHead }
	'tail'         { TokenTail }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'/'            { TokenDiv }
	'%'            { TokenMod }
	'=='           { TokenEq }
	'<='           { TokenLe }
	'>='           { TokenGe }
	'<'            { TokenLt }
	'>'            { TokenGt }
	'&&'           { TokenAnd }
	'||'           { TokenOr }
	'not'          { TokenNot }
	'('            { TokenOPar }
	')'            { TokenCPar }
	'if'           { TokenIf }
	'then'         { TokenThen }
	'else'         { TokenElse }
	'let'          { TokenLet }
	'='            { TokenEqLet }
	'in'           { TokenIn }
	'end'          { TokenEnd }
	'lam'          { TokenLamb }
	'->'           { TokenArrow }
	'['            { TokenOBrack }
	']'            { TokenCBrack }
	'Nat'          { TokenTyNat }
	'Bool'         { TokenTyBool }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	E               rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	T               rules 27, 28, 29, 30, 31

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . E                                (rule 0)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 3

State 1

	E -> . var                                          (rule 1)

	var            shift, and enter state 2


State 2

	E -> var .                                          (rule 1)

	num            reduce using rule 1
	var            reduce using rule 1
	bool           reduce using rule 1
	'[]'           reduce using rule 1
	'::'           reduce using rule 1
	'++'           reduce using rule 1
	'head'         reduce using rule 1
	'tail'         reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'%'            reduce using rule 1
	'=='           reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'&&'           reduce using rule 1
	'||'           reduce using rule 1
	'not'          reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'if'           reduce using rule 1
	'then'         reduce using rule 1
	'else'         reduce using rule 1
	'let'          reduce using rule 1
	'in'           reduce using rule 1
	'end'          reduce using rule 1
	'lam'          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser -> E .                                (rule 0)
	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	%eof           accept


State 4

	E -> num .                                          (rule 2)

	num            reduce using rule 2
	var            reduce using rule 2
	bool           reduce using rule 2
	'[]'           reduce using rule 2
	'::'           reduce using rule 2
	'++'           reduce using rule 2
	'head'         reduce using rule 2
	'tail'         reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'%'            reduce using rule 2
	'=='           reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'&&'           reduce using rule 2
	'||'           reduce using rule 2
	'not'          reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'if'           reduce using rule 2
	'then'         reduce using rule 2
	'else'         reduce using rule 2
	'let'          reduce using rule 2
	'in'           reduce using rule 2
	'end'          reduce using rule 2
	'lam'          reduce using rule 2
	%eof           reduce using rule 2


State 5

	E -> bool .                                         (rule 3)

	num            reduce using rule 3
	var            reduce using rule 3
	bool           reduce using rule 3
	'[]'           reduce using rule 3
	'::'           reduce using rule 3
	'++'           reduce using rule 3
	'head'         reduce using rule 3
	'tail'         reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'%'            reduce using rule 3
	'=='           reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'&&'           reduce using rule 3
	'||'           reduce using rule 3
	'not'          reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'if'           reduce using rule 3
	'then'         reduce using rule 3
	'else'         reduce using rule 3
	'let'          reduce using rule 3
	'in'           reduce using rule 3
	'end'          reduce using rule 3
	'lam'          reduce using rule 3
	%eof           reduce using rule 3


State 6

	E -> '[]' .                                         (rule 4)

	num            reduce using rule 4
	var            reduce using rule 4
	bool           reduce using rule 4
	'[]'           reduce using rule 4
	'::'           reduce using rule 4
	'++'           reduce using rule 4
	'head'         reduce using rule 4
	'tail'         reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'%'            reduce using rule 4
	'=='           reduce using rule 4
	'<='           reduce using rule 4
	'>='           reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'&&'           reduce using rule 4
	'||'           reduce using rule 4
	'not'          reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'if'           reduce using rule 4
	'then'         reduce using rule 4
	'else'         reduce using rule 4
	'let'          reduce using rule 4
	'in'           reduce using rule 4
	'end'          reduce using rule 4
	'lam'          reduce using rule 4
	%eof           reduce using rule 4


State 7

	E -> 'head' . E                                     (rule 20)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 20

State 8

	E -> 'tail' . E                                     (rule 21)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 19

State 9

	E -> 'not' . E                                      (rule 19)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 18

State 10

	E -> '(' . E ')'                                    (rule 6)
	E -> '(' . E E ')'                                  (rule 23)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 17

State 11

	E -> 'if' . E 'then' E 'else' E                     (rule 24)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 16

State 12

	E -> 'let' . var '=' E 'in' E 'end'                 (rule 25)

	var            shift, and enter state 15


State 13

	E -> 'lam' . var '::' T '->' E                      (rule 26)

	var            shift, and enter state 14


State 14

	E -> 'lam' var . '::' T '->' E                      (rule 26)

	'::'           shift, and enter state 53


State 15

	E -> 'let' var . '=' E 'in' E 'end'                 (rule 25)

	'='            shift, and enter state 52


State 16

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'if' E . 'then' E 'else' E                     (rule 24)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'then'         shift, and enter state 51


State 17

	E -> E . '::' E                                     (rule 5)
	E -> '(' E . ')'                                    (rule 6)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> '(' E . E ')'                                  (rule 23)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	')'            shift, and enter state 50
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 49

State 18

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> 'not' E .                                      (rule 19)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 19
	var            reduce using rule 19
	bool           reduce using rule 19
	'[]'           reduce using rule 19
	'::'           reduce using rule 19
	'++'           reduce using rule 19
	'head'         reduce using rule 19
	'tail'         reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	'=='           reduce using rule 19
	'<='           reduce using rule 19
	'>='           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'not'          reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'if'           reduce using rule 19
	'then'         reduce using rule 19
	'else'         reduce using rule 19
	'let'          reduce using rule 19
	'in'           reduce using rule 19
	'end'          reduce using rule 19
	'lam'          reduce using rule 19
	%eof           reduce using rule 19


State 19

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> 'tail' E .                                     (rule 21)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 21
	var            reduce using rule 21
	bool           reduce using rule 21
	'[]'           reduce using rule 21
	'::'           reduce using rule 21
	'++'           reduce using rule 21
	'head'         reduce using rule 21
	'tail'         reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'%'            reduce using rule 21
	'=='           reduce using rule 21
	'<='           reduce using rule 21
	'>='           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	'not'          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'if'           reduce using rule 21
	'then'         reduce using rule 21
	'else'         reduce using rule 21
	'let'          reduce using rule 21
	'in'           reduce using rule 21
	'end'          reduce using rule 21
	'lam'          reduce using rule 21
	%eof           reduce using rule 21


State 20

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> 'head' E .                                     (rule 20)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 20
	var            reduce using rule 20
	bool           reduce using rule 20
	'[]'           reduce using rule 20
	'::'           reduce using rule 20
	'++'           reduce using rule 20
	'head'         reduce using rule 20
	'tail'         reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'%'            reduce using rule 20
	'=='           reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	'not'          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'if'           reduce using rule 20
	'then'         reduce using rule 20
	'else'         reduce using rule 20
	'let'          reduce using rule 20
	'in'           reduce using rule 20
	'end'          reduce using rule 20
	'lam'          reduce using rule 20
	%eof           reduce using rule 20


State 21

	E -> E '::' . E                                     (rule 5)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 48

State 22

	E -> E '++' . E                                     (rule 22)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 47

State 23

	E -> E '+' . E                                      (rule 7)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 46

State 24

	E -> E '-' . E                                      (rule 8)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 45

State 25

	E -> E '*' . E                                      (rule 9)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 44

State 26

	E -> E '/' . E                                      (rule 10)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 43

State 27

	E -> E '%' . E                                      (rule 11)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 42

State 28

	E -> E '==' . E                                     (rule 12)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 41

State 29

	E -> E '<=' . E                                     (rule 14)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 40

State 30

	E -> E '>=' . E                                     (rule 16)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 39

State 31

	E -> E '<' . E                                      (rule 13)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 38

State 32

	E -> E '>' . E                                      (rule 15)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 37

State 33

	E -> E '&&' . E                                     (rule 17)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 36

State 34

	E -> E '||' . E                                     (rule 18)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 35

State 35

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E '||' E .                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 18
	var            reduce using rule 18
	bool           reduce using rule 18
	'[]'           reduce using rule 18
	'::'           reduce using rule 18
	'++'           reduce using rule 18
	'head'         reduce using rule 18
	'tail'         reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'not'          reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'if'           reduce using rule 18
	'then'         reduce using rule 18
	'else'         reduce using rule 18
	'let'          reduce using rule 18
	'in'           reduce using rule 18
	'end'          reduce using rule 18
	'lam'          reduce using rule 18
	%eof           reduce using rule 18


State 36

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E '&&' E .                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 17
	var            reduce using rule 17
	bool           reduce using rule 17
	'[]'           reduce using rule 17
	'::'           reduce using rule 17
	'++'           reduce using rule 17
	'head'         reduce using rule 17
	'tail'         reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'%'            reduce using rule 17
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'not'          reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'if'           reduce using rule 17
	'then'         reduce using rule 17
	'else'         reduce using rule 17
	'let'          reduce using rule 17
	'in'           reduce using rule 17
	'end'          reduce using rule 17
	'lam'          reduce using rule 17
	%eof           reduce using rule 17


State 37

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E '>' E .                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 15
	var            reduce using rule 15
	bool           reduce using rule 15
	'[]'           reduce using rule 15
	'::'           reduce using rule 15
	'++'           reduce using rule 15
	'head'         reduce using rule 15
	'tail'         reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'%'            reduce using rule 15
	'=='           reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	'not'          reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'if'           reduce using rule 15
	'then'         reduce using rule 15
	'else'         reduce using rule 15
	'let'          reduce using rule 15
	'in'           reduce using rule 15
	'end'          reduce using rule 15
	'lam'          reduce using rule 15
	%eof           reduce using rule 15


State 38

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E '<' E .                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 13
	var            reduce using rule 13
	bool           reduce using rule 13
	'[]'           reduce using rule 13
	'::'           reduce using rule 13
	'++'           reduce using rule 13
	'head'         reduce using rule 13
	'tail'         reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'%'            reduce using rule 13
	'=='           reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	'not'          reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'if'           reduce using rule 13
	'then'         reduce using rule 13
	'else'         reduce using rule 13
	'let'          reduce using rule 13
	'in'           reduce using rule 13
	'end'          reduce using rule 13
	'lam'          reduce using rule 13
	%eof           reduce using rule 13


State 39

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E '>=' E .                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 16
	var            reduce using rule 16
	bool           reduce using rule 16
	'[]'           reduce using rule 16
	'::'           reduce using rule 16
	'++'           reduce using rule 16
	'head'         reduce using rule 16
	'tail'         reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'%'            reduce using rule 16
	'=='           reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	'not'          reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'if'           reduce using rule 16
	'then'         reduce using rule 16
	'else'         reduce using rule 16
	'let'          reduce using rule 16
	'in'           reduce using rule 16
	'end'          reduce using rule 16
	'lam'          reduce using rule 16
	%eof           reduce using rule 16


State 40

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E '<=' E .                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 14
	var            reduce using rule 14
	bool           reduce using rule 14
	'[]'           reduce using rule 14
	'::'           reduce using rule 14
	'++'           reduce using rule 14
	'head'         reduce using rule 14
	'tail'         reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'%'            reduce using rule 14
	'=='           reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	'not'          reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'if'           reduce using rule 14
	'then'         reduce using rule 14
	'else'         reduce using rule 14
	'let'          reduce using rule 14
	'in'           reduce using rule 14
	'end'          reduce using rule 14
	'lam'          reduce using rule 14
	%eof           reduce using rule 14


State 41

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E '==' E .                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 12
	var            reduce using rule 12
	bool           reduce using rule 12
	'[]'           reduce using rule 12
	'::'           reduce using rule 12
	'++'           reduce using rule 12
	'head'         reduce using rule 12
	'tail'         reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'%'            reduce using rule 12
	'=='           reduce using rule 12
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	'not'          reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'if'           reduce using rule 12
	'then'         reduce using rule 12
	'else'         reduce using rule 12
	'let'          reduce using rule 12
	'in'           reduce using rule 12
	'end'          reduce using rule 12
	'lam'          reduce using rule 12
	%eof           reduce using rule 12


State 42

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E '%' E .                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 11
	var            reduce using rule 11
	bool           reduce using rule 11
	'[]'           reduce using rule 11
	'::'           reduce using rule 11
	'++'           reduce using rule 11
	'head'         reduce using rule 11
	'tail'         reduce using rule 11
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'%'            reduce using rule 11
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'if'           reduce using rule 11
	'then'         reduce using rule 11
	'else'         reduce using rule 11
	'let'          reduce using rule 11
	'in'           reduce using rule 11
	'end'          reduce using rule 11
	'lam'          reduce using rule 11
	%eof           reduce using rule 11


State 43

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E '/' E .                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 10
	var            reduce using rule 10
	bool           reduce using rule 10
	'[]'           reduce using rule 10
	'::'           reduce using rule 10
	'++'           reduce using rule 10
	'head'         reduce using rule 10
	'tail'         reduce using rule 10
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'%'            reduce using rule 10
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'if'           reduce using rule 10
	'then'         reduce using rule 10
	'else'         reduce using rule 10
	'let'          reduce using rule 10
	'in'           reduce using rule 10
	'end'          reduce using rule 10
	'lam'          reduce using rule 10
	%eof           reduce using rule 10


State 44

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E '*' E .                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 9
	var            reduce using rule 9
	bool           reduce using rule 9
	'[]'           reduce using rule 9
	'::'           reduce using rule 9
	'++'           reduce using rule 9
	'head'         reduce using rule 9
	'tail'         reduce using rule 9
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'%'            reduce using rule 9
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'if'           reduce using rule 9
	'then'         reduce using rule 9
	'else'         reduce using rule 9
	'let'          reduce using rule 9
	'in'           reduce using rule 9
	'end'          reduce using rule 9
	'lam'          reduce using rule 9
	%eof           reduce using rule 9


State 45

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E '-' E .                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 8
	var            reduce using rule 8
	bool           reduce using rule 8
	'[]'           reduce using rule 8
	'::'           reduce using rule 8
	'++'           reduce using rule 8
	'head'         reduce using rule 8
	'tail'         reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'%'            reduce using rule 8
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'if'           reduce using rule 8
	'then'         reduce using rule 8
	'else'         reduce using rule 8
	'let'          reduce using rule 8
	'in'           reduce using rule 8
	'end'          reduce using rule 8
	'lam'          reduce using rule 8
	%eof           reduce using rule 8


State 46

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E '+' E .                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 7
	var            reduce using rule 7
	bool           reduce using rule 7
	'[]'           reduce using rule 7
	'::'           reduce using rule 7
	'++'           reduce using rule 7
	'head'         reduce using rule 7
	'tail'         reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'%'            reduce using rule 7
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'if'           reduce using rule 7
	'then'         reduce using rule 7
	'else'         reduce using rule 7
	'let'          reduce using rule 7
	'in'           reduce using rule 7
	'end'          reduce using rule 7
	'lam'          reduce using rule 7
	%eof           reduce using rule 7


State 47

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> E '++' E .                                     (rule 22)

	num            reduce using rule 22
	var            reduce using rule 22
	bool           reduce using rule 22
	'[]'           reduce using rule 22
	'::'           shift, and enter state 21
	'++'           reduce using rule 22
	'head'         reduce using rule 22
	'tail'         reduce using rule 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'if'           reduce using rule 22
	'then'         reduce using rule 22
	'else'         reduce using rule 22
	'let'          reduce using rule 22
	'in'           reduce using rule 22
	'end'          reduce using rule 22
	'lam'          reduce using rule 22
	%eof           reduce using rule 22


State 48

	E -> E . '::' E                                     (rule 5)
	E -> E '::' E .                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)

	num            reduce using rule 5
	var            reduce using rule 5
	bool           reduce using rule 5
	'[]'           reduce using rule 5
	'::'           shift, and enter state 21
	'++'           reduce using rule 5
	'head'         reduce using rule 5
	'tail'         reduce using rule 5
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'if'           reduce using rule 5
	'then'         reduce using rule 5
	'else'         reduce using rule 5
	'let'          reduce using rule 5
	'in'           reduce using rule 5
	'end'          reduce using rule 5
	'lam'          reduce using rule 5
	%eof           reduce using rule 5


State 49

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> '(' E E . ')'                                  (rule 23)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	')'            shift, and enter state 61


State 50

	E -> '(' E ')' .                                    (rule 6)

	num            reduce using rule 6
	var            reduce using rule 6
	bool           reduce using rule 6
	'[]'           reduce using rule 6
	'::'           reduce using rule 6
	'++'           reduce using rule 6
	'head'         reduce using rule 6
	'tail'         reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'%'            reduce using rule 6
	'=='           reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'&&'           reduce using rule 6
	'||'           reduce using rule 6
	'not'          reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'if'           reduce using rule 6
	'then'         reduce using rule 6
	'else'         reduce using rule 6
	'let'          reduce using rule 6
	'in'           reduce using rule 6
	'end'          reduce using rule 6
	'lam'          reduce using rule 6
	%eof           reduce using rule 6


State 51

	E -> 'if' E 'then' . E 'else' E                     (rule 24)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 60

State 52

	E -> 'let' var '=' . E 'in' E 'end'                 (rule 25)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 59

State 53

	E -> 'lam' var '::' . T '->' E                      (rule 26)

	'('            shift, and enter state 55
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	T              goto state 54

State 54

	E -> 'lam' var '::' T . '->' E                      (rule 26)
	T -> T . '->' T                                     (rule 29)

	'->'           shift, and enter state 66


State 55

	T -> '(' . T ')'                                    (rule 31)

	'('            shift, and enter state 55
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	T              goto state 65

State 56

	T -> '[' . T ']'                                    (rule 30)

	'('            shift, and enter state 55
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	T              goto state 64

State 57

	T -> 'Nat' .                                        (rule 27)

	')'            reduce using rule 27
	'->'           reduce using rule 27
	']'            reduce using rule 27


State 58

	T -> 'Bool' .                                       (rule 28)

	')'            reduce using rule 28
	'->'           reduce using rule 28
	']'            reduce using rule 28


State 59

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'let' var '=' E . 'in' E 'end'                 (rule 25)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'in'           shift, and enter state 63


State 60

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'if' E 'then' E . 'else' E                     (rule 24)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'else'         shift, and enter state 62


State 61

	E -> '(' E E ')' .                                  (rule 23)

	num            reduce using rule 23
	var            reduce using rule 23
	bool           reduce using rule 23
	'[]'           reduce using rule 23
	'::'           reduce using rule 23
	'++'           reduce using rule 23
	'head'         reduce using rule 23
	'tail'         reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'%'            reduce using rule 23
	'=='           reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	'not'          reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'if'           reduce using rule 23
	'then'         reduce using rule 23
	'else'         reduce using rule 23
	'let'          reduce using rule 23
	'in'           reduce using rule 23
	'end'          reduce using rule 23
	'lam'          reduce using rule 23
	%eof           reduce using rule 23


State 62

	E -> 'if' E 'then' E 'else' . E                     (rule 24)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 74

State 63

	E -> 'let' var '=' E 'in' . E 'end'                 (rule 25)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 10
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13

	E              goto state 73

State 64

	T -> T . '->' T                                     (rule 29)
	T -> '[' T . ']'                                    (rule 30)

	'->'           shift, and enter state 71
	']'            shift, and enter state 72


State 65

	T -> T . '->' T                                     (rule 29)
	T -> '(' T . ')'                                    (rule 31)

	')'            shift, and enter state 70
	'->'           shift, and enter state 71


State 66

	E -> 'lam' var '::' T '->' . E                      (rule 26)
	T -> T '->' . T                                     (rule 29)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 69
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	E              goto state 67
	T              goto state 68

State 67

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'lam' var '::' T '->' E .                      (rule 26)

	num            reduce using rule 26
	var            reduce using rule 26
	bool           reduce using rule 26
	'[]'           reduce using rule 26
	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'head'         reduce using rule 26
	'tail'         reduce using rule 26
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'if'           reduce using rule 26
	'then'         reduce using rule 26
	'else'         reduce using rule 26
	'let'          reduce using rule 26
	'in'           reduce using rule 26
	'end'          reduce using rule 26
	'lam'          reduce using rule 26
	%eof           reduce using rule 26


State 68

	T -> T . '->' T                                     (rule 29)
	T -> T '->' T .                                     (rule 29)

	')'            reduce using rule 29
	'->'           reduce using rule 29
	']'            reduce using rule 29


State 69

	E -> '(' . E ')'                                    (rule 6)
	E -> '(' . E E ')'                                  (rule 23)
	T -> '(' . T ')'                                    (rule 31)

	num            shift, and enter state 4
	var            shift, and enter state 2
	bool           shift, and enter state 5
	'[]'           shift, and enter state 6
	'head'         shift, and enter state 7
	'tail'         shift, and enter state 8
	'not'          shift, and enter state 9
	'('            shift, and enter state 69
	'if'           shift, and enter state 11
	'let'          shift, and enter state 12
	'lam'          shift, and enter state 13
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	E              goto state 17
	T              goto state 65

State 70

	T -> '(' T ')' .                                    (rule 31)

	')'            reduce using rule 31
	'->'           reduce using rule 31
	']'            reduce using rule 31


State 71

	T -> T '->' . T                                     (rule 29)

	'('            shift, and enter state 55
	'['            shift, and enter state 56
	'Nat'          shift, and enter state 57
	'Bool'         shift, and enter state 58

	T              goto state 68

State 72

	T -> '[' T ']' .                                    (rule 30)

	')'            reduce using rule 30
	'->'           reduce using rule 30
	']'            reduce using rule 30


State 73

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'let' var '=' E 'in' E . 'end'                 (rule 25)

	'::'           shift, and enter state 21
	'++'           shift, and enter state 22
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'end'          shift, and enter state 75


State 74

	E -> E . '::' E                                     (rule 5)
	E -> E . '+' E                                      (rule 7)
	E -> E . '-' E                                      (rule 8)
	E -> E . '*' E                                      (rule 9)
	E -> E . '/' E                                      (rule 10)
	E -> E . '%' E                                      (rule 11)
	E -> E . '==' E                                     (rule 12)
	E -> E . '<' E                                      (rule 13)
	E -> E . '<=' E                                     (rule 14)
	E -> E . '>' E                                      (rule 15)
	E -> E . '>=' E                                     (rule 16)
	E -> E . '&&' E                                     (rule 17)
	E -> E . '||' E                                     (rule 18)
	E -> E . '++' E                                     (rule 22)
	E -> 'if' E 'then' E 'else' E .                     (rule 24)

	num            reduce using rule 24
	var            reduce using rule 24
	bool           reduce using rule 24
	'[]'           reduce using rule 24
	'::'           reduce using rule 24
	'++'           reduce using rule 24
	'head'         reduce using rule 24
	'tail'         reduce using rule 24
	'+'            shift, and enter state 23
	'-'            shift, and enter state 24
	'*'            shift, and enter state 25
	'/'            shift, and enter state 26
	'%'            shift, and enter state 27
	'=='           shift, and enter state 28
	'<='           shift, and enter state 29
	'>='           shift, and enter state 30
	'<'            shift, and enter state 31
	'>'            shift, and enter state 32
	'&&'           shift, and enter state 33
	'||'           shift, and enter state 34
	'not'          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'if'           reduce using rule 24
	'then'         reduce using rule 24
	'else'         reduce using rule 24
	'let'          reduce using rule 24
	'in'           reduce using rule 24
	'end'          reduce using rule 24
	'lam'          reduce using rule 24
	%eof           reduce using rule 24


State 75

	E -> 'let' var '=' E 'in' E 'end' .                 (rule 25)

	num            reduce using rule 25
	var            reduce using rule 25
	bool           reduce using rule 25
	'[]'           reduce using rule 25
	'::'           reduce using rule 25
	'++'           reduce using rule 25
	'head'         reduce using rule 25
	'tail'         reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'%'            reduce using rule 25
	'=='           reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'not'          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'if'           reduce using rule 25
	'then'         reduce using rule 25
	'else'         reduce using rule 25
	'let'          reduce using rule 25
	'in'           reduce using rule 25
	'end'          reduce using rule 25
	'lam'          reduce using rule 25
	%eof           reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 32
Number of terminals: 36
Number of non-terminals: 3
Number of states: 76
